#!/usr/bin/env python3
"""–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"""

import asyncio
import os
from grok_service import GrokService

async def test_markdown_generation():
    
    grok_service = GrokService()
    
    topic_dict = {
        'id': 38,
        'title': '–î–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö 1C —Å –ò–ò',
        'description': '–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—ã—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ 1C. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ isolation forest. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.',
        'category': '1c',
        'learning_time': '1-2 –¥–Ω—è',
        'difficulty': '–°—Ä–µ–¥–Ω–∏–π'
    }
    
    print('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Markdown –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...')
    
    try:
        materials = await grok_service.generate_learning_materials(topic_dict)
        print(f'‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(materials)} —Å–µ–∫—Ü–∏–π')
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
        for key, value in materials.items():
            print(f'\nüìÇ {key.upper()}:')
            print(f'   –î–ª–∏–Ω–∞: {len(value)} —Å–∏–º–≤–æ–ª–æ–≤')
            if value:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Markdown
                preview = value[:300].replace('\n', '\\n')
                print(f'   –ü—Ä–µ–≤—å—é: {preview}...')
            else:
                print('   (–ø—É—Å—Ç–æ–µ)')
                
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')

if __name__ == '__main__':
    asyncio.run(test_markdown_generation())
