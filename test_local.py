#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

async def test_grok_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º GrokService"""
    try:
        from grok_service import GrokService
        
        print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º GrokService...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        api_key = os.getenv('GROK_API_KEY')
        if not api_key or api_key == 'your_grok_api_key_here':
            print("‚ùå GROK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            return False
        
        grok = GrokService()
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        test_topic = {
            'title': '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            'description': '–û—Å–Ω–æ–≤—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
            'difficulty': 'beginner'
        }
        
        print("   –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
        content = await grok.generate_content(test_topic)
        
        if content and len(content) > 50:
            print("‚úÖ GrokService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(content)}")
            return True
        else:
            print("‚ùå GrokService –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ GrokService: {e}")
        return False

async def test_topic_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º TopicService"""
    try:
        from topic_service import TopicService
        
        print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º TopicService...")
        
        topic_service = TopicService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤
        topics = await topic_service.get_topics_by_difficulty('beginner')
        
        if topics and len(topics) > 0:
            print(f"‚úÖ TopicService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö: {len(topics)}")
            return True
        else:
            print("‚ùå TopicService –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–ø–∏–∫–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ TopicService: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    modules = [
        'grok_service',
        'topic_service', 
        'database',
        'bot',
        'scheduler',
        'health_check'
    ]
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π...")
    
    success_count = 0
    for module_name in modules:
        try:
            __import__(module_name)
            print(f"   ‚úÖ {module_name}")
            success_count += 1
        except Exception as e:
            print(f"   ‚ùå {module_name}: {e}")
    
    print(f"–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(modules)} –º–æ–¥—É–ª–µ–π")
    return success_count == len(modules)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    env_local_path = Path('.env.local')
    if env_local_path.exists():
        print("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º .env.local")
        with open(env_local_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
    else:
        print("‚ö†Ô∏è  –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    imports_ok = test_imports()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º TopicService (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–µ–π)
    topic_service_ok = await test_topic_service()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º GrokService (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
    grok_service_ok = await test_grok_service()
    print()
    
    # –ò—Ç–æ–≥–∏
    print("=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"   TopicService: {'‚úÖ' if topic_service_ok else '‚ùå'}")  
    print(f"   GrokService: {'‚úÖ' if grok_service_ok else '‚ùå'}")
    print()
    
    if imports_ok and topic_service_ok:
        print("üéâ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        if not grok_service_ok:
            print("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GROK_API_KEY –≤ .env.local –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    asyncio.run(main())
