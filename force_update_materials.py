#!/usr/bin/env python3
"""–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""

import asyncio
import os
from database import Database, LearningMaterial
from grok_service import GrokService
from topic_service import TopicService

async def force_update_materials():
    os.environ['DATABASE_URL'] = 'sqlite+aiosqlite:///local_test.db'
    
    db = Database()
    await db.init_db()
    
    grok_service = GrokService()
    topic_service = TopicService(db, grok_service)
    
    print('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ–º—ã –ø—Ä–æ –¥–µ—Ç–µ–∫—Ü–∏—é –∞–Ω–æ–º–∞–ª–∏–π...')
    
    topic_dict = None
    topic_id = None
    
    # –ù–∞–π–¥–µ–º —Ç–µ–º—É –∏ –ø–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ
    async with db.async_session() as session:
        from sqlalchemy import select, delete
        from database import Topic
        
        result = await session.execute(
            select(Topic).where(Topic.title.like('%–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π%'))
        )
        topic = result.scalar_one_or_none()
        
        if topic:
            topic_id = topic.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
            topic_dict = {
                'id': topic.id,
                'title': topic.title,
                'description': topic.description,
                'category': topic.category
            }
            
            print(f'üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–º—É: {topic.title}')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            print('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...')
            await session.execute(
                delete(LearningMaterial).where(LearningMaterial.topic_id == topic_id)
            )
            await session.commit()
            
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–Ω–µ —Å–µ—Å—Å–∏–∏
    if topic_dict and topic_id:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —á–µ—Ä–µ–∑ Grok
        print('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —á–µ—Ä–µ–∑ Grok API...')
        materials = await grok_service.generate_learning_materials(topic_dict)
        print(f'‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç Grok: {len(str(materials))} —Å–∏–º–≤–æ–ª–æ–≤')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await topic_service._save_materials_to_db(topic_id, materials)
        print('üíæ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        
        print('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    else:
        print('‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

if __name__ == '__main__':
    asyncio.run(force_update_materials())
