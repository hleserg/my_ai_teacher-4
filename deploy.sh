#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AI Learning Bot –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
# 
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
# chmod +x deploy.sh
# ./deploy.sh [development|production|monitoring]

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
MODE=${1:-production}

log_info "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI Learning Bot –≤ —Ä–µ–∂–∏–º–µ: $MODE"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
case $MODE in
    "development")
        COMPOSE_FILE="docker-compose.yml"
        ENV_FILE=".env.local"
        ;;
    "production")
        COMPOSE_FILE="docker-compose.prod.yml" 
        ENV_FILE=".env.prod"
        ;;
    "monitoring")
        COMPOSE_FILE="docker-compose.prod.yml"
        ENV_FILE=".env.prod"
        PROFILES="--profile monitoring"
        ;;
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $MODE. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: development, production, monitoring"
        exit 1
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
if [[ ! -f "$COMPOSE_FILE" ]]; then
    log_error "–§–∞–π–ª $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

if [[ ! -f "$ENV_FILE" ]]; then
    log_warning "–§–∞–π–ª $ENV_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
    
    if [[ "$MODE" == "production" || "$MODE" == "monitoring" ]]; then
        if [[ -f ".env.prod.example" ]]; then
            cp .env.prod.example "$ENV_FILE"
            log_info "–§–∞–π–ª $ENV_FILE —Å–æ–∑–¥–∞–Ω –∏–∑ .env.prod.example"
            log_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ $ENV_FILE –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞..."
        else
            log_error "–§–∞–π–ª .env.prod.example –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
        fi
    fi
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

if grep -q "your_telegram_bot_token_here\|your_grok_api_key_here" "$ENV_FILE" 2>/dev/null; then
    log_error "–í —Ñ–∞–π–ª–µ $ENV_FILE –µ—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log_info "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p logs config ssl nginx/logs monitoring/grafana/provisioning

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f "$COMPOSE_FILE" down --remove-orphans 2>/dev/null || true

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
log_info "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
docker-compose -f "$COMPOSE_FILE" build --no-cache

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."

if [[ "$MODE" == "monitoring" ]]; then
    log_info "–ó–∞–ø—É—Å–∫ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" $PROFILES up -d
else
    docker-compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d
fi

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker-compose -f "$COMPOSE_FILE" ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
log_info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
sleep 15

if docker-compose -f "$COMPOSE_FILE" exec -T bot python health_check.py; then
    log_success "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
else
    log_warning "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é —Å–∏—Å—Ç–µ–º—ã"
fi

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
log_info "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  –õ–æ–≥–∏ –±–æ—Ç–∞:           docker-compose -f $COMPOSE_FILE logs -f bot"
echo "  –õ–æ–≥–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:   docker-compose -f $COMPOSE_FILE logs -f scheduler"
echo "  –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:     docker-compose -f $COMPOSE_FILE ps"
echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:           docker-compose -f $COMPOSE_FILE down"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:          docker-compose -f $COMPOSE_FILE restart"

if [[ "$MODE" == "monitoring" ]]; then
    echo ""
    log_info "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    echo "  Grafana:    http://localhost:3000 (admin/admin123)"
    echo "  Prometheus: http://localhost:9090"
fi

echo ""
log_info "üìù –õ–æ–≥–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ./logs/"
log_info "‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $ENV_FILE"

# –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
if docker-compose -f "$COMPOSE_FILE" ps | grep -q "Up"; then
    log_success "üöÄ AI Learning Bot —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    log_error "‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f $COMPOSE_FILE logs"
    exit 1
fi
