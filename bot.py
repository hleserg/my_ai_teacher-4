import os
import logging
import asyncio
import signal
from datetime import datetime, time, timedelta
from typing import List, Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from database import Database
from grok_service import GrokService
from topic_service import TopicService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AILearningBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.db = Database()
        self.grok_service = GrokService()
        self.topic_service = TopicService(self.db, self.grok_service)

    async def _send_loading_indicator(self, update_or_query, message: str = "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", context=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            if hasattr(update_or_query, 'message') and update_or_query.message:
                # –≠—Ç–æ callback query
                loading_msg = await update_or_query.message.reply_text(message)
            elif hasattr(update_or_query, 'effective_chat'):
                # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π update
                loading_msg = await update_or_query.message.reply_text(message)
            else:
                return None
            return loading_msg
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None

    async def _delete_loading_message(self, loading_msg):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            await loading_msg.delete()
        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            pass
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–î—Ä—É–≥"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self.db.register_user(user_id, username)
        
        welcome_message = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Learning Bot!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤–µ–π—à–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/topics - –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –ò–ò
/topics_1c - –¢–µ–º—ã –ò–ò –¥–ª—è 1C Enterprise
/progress - –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
/done - –û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
/help - –ü–æ–º–æ—â—å

–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ç–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –ò–ò! üöÄ
        """
        
        await update.message.reply_text(welcome_message)

    async def show_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /topics - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ —Ç–µ–º—ã –ø–æ –ò–ò"""
        await self._show_topics_list(update, context, "general")

    async def show_topics_1c(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /topics_1c - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –¥–ª—è 1C Enterprise"""
        await self._show_topics_list(update, context, "1c")

    async def _show_topics_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º
            loading_msg = await self._send_loading_indicator(
                update, 
                "üìö –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã...",
                context
            )
            
            topics = await self.topic_service.get_topics_by_category(category)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await self._delete_loading_message(loading_msg)
            
            if not topics:
                await update.message.reply_text(
                    "üîÑ –¢–µ–º—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
                return
            
            keyboard = []
            for i, topic in enumerate(topics[:20], 1):
                keyboard.append([
                    InlineKeyboardButton(
                        f"{i}. {topic['title'][:50]}...",
                        callback_data=f"topic_{topic['id']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            header = "üß† –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –ø–æ –ò–ò:" if category == "general" else "üè¢ –¢–µ–º—ã –ò–ò –¥–ª—è 1C Enterprise:"
            
            await update.message.reply_text(
                f"{header}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error showing topics: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_topic_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
        query = update.callback_query
        await query.answer()
        
        topic_id = int(query.data.split('_')[1])
        user_id = query.from_user.id
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loading_msg = await self._send_loading_indicator(
                query, 
                "üîÑ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                context
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ–º—ã
            topic = await self.topic_service.get_topic_by_id(topic_id)
            if not topic:
                await self._delete_loading_message(loading_msg)
                await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.db.set_current_topic(user_id, topic_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if loading_msg:
                await loading_msg.edit_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–º–æ—â—å—é –ò–ò...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            materials = await self.topic_service.generate_learning_materials(topic)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await self._delete_loading_message(loading_msg)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self._format_topic_materials(topic, materials)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ò–∑—É—á–∏–ª!", callback_data=f"complete_{topic_id}")],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"question_{topic_id}")],
                [InlineKeyboardButton("üìö –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_topics")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏
            await self._send_long_message(
                query, 
                response,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"Error handling topic selection: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def _split_long_message(self, text: str, max_length: int = 4096) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length —Å–∏–º–≤–æ–ª–æ–≤"""
        if len(text) <= max_length:
            return [text]
        
        parts = []
        remaining_text = text
        
        while remaining_text:
            if len(remaining_text) <= max_length:
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç
                parts.append(remaining_text.strip())
                break
            
            # –ò—â–µ–º –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
            split_pos = max_length
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑—Ä—ã–≤ –ø–æ –∞–±–∑–∞—Ü–∞–º (–¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å)
            double_newline_pos = remaining_text.rfind('\n\n', 0, max_length)
            if double_newline_pos > max_length // 2:  # –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
                split_pos = double_newline_pos + 2
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑—Ä—ã–≤ –ø–æ –æ–¥–∏–Ω–∞—Ä–Ω–æ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É
                single_newline_pos = remaining_text.rfind('\n', 0, max_length)
                if single_newline_pos > max_length // 2:
                    split_pos = single_newline_pos + 1
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑—Ä—ã–≤ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é (—Ç–æ—á–∫–∞ + –ø—Ä–æ–±–µ–ª)
                    sentence_pos = remaining_text.rfind('. ', 0, max_length - 1)
                    if sentence_pos > max_length // 2:
                        split_pos = sentence_pos + 2
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑—Ä—ã–≤ –ø–æ –ø—Ä–æ–±–µ–ª—É
                        space_pos = remaining_text.rfind(' ', 0, max_length)
                        if space_pos > max_length // 2:
                            split_pos = space_pos + 1
                        # –ò–Ω–∞—á–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ –Ω–∞ max_length
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Ç–µ–∫—Å—Ç–æ–º
            parts.append(remaining_text[:split_pos].strip())
            remaining_text = remaining_text[split_pos:].strip()
        
        return parts

    async def _send_long_text_message(self, update: Update, text: str, reply_markup=None, parse_mode='Markdown', disable_web_page_preview=True):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        parts = self._split_long_message(text)
        
        async def safe_send_text(message_text, reply_markup_to_use=None):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å fallback –Ω–∞ plain text –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö Markdown"""
            try:
                await update.message.reply_text(
                    message_text,
                    reply_markup=reply_markup_to_use,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
            except Exception as markdown_error:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                logger.warning(f"Markdown parse error, falling back to plain text: {markdown_error}")
                try:
                    await update.message.reply_text(
                        message_text,
                        reply_markup=reply_markup_to_use,
                        parse_mode=None,  # –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        disable_web_page_preview=disable_web_page_preview
                    )
                except Exception:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—á–∏—â–∞–µ–º –æ—Ç –≤—Å–µ—Ö —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                    clean_text = message_text.replace('*', '').replace('_', '').replace('`', '')
                    await update.message.reply_text(
                        clean_text,
                        reply_markup=reply_markup_to_use,
                        disable_web_page_preview=disable_web_page_preview
                    )
        
        if len(parts) == 1:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω—É —á–∞—Å—Ç—å
            await safe_send_text(parts[0], reply_markup)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å
            # –ü–µ—Ä–≤—É—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            await safe_send_text(f"üìÑ –ß–∞—Å—Ç—å 1/{len(parts)}\n\n{parts[0]}")
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            for i, part in enumerate(parts[1:], 2):
                is_last_part = (i == len(parts))
                message_text = f"üìÑ –ß–∞—Å—Ç—å {i}/{len(parts)}\n\n{part}"
                
                await safe_send_text(
                    message_text,
                    reply_markup if is_last_part else None
                )

    async def _send_long_message(self, query, text: str, reply_markup=None, parse_mode='Markdown', disable_web_page_preview=True):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        parts = self._split_long_message(text)
        
        async def safe_edit_text(message_text, reply_markup_to_use=None):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å fallback –Ω–∞ plain text –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
            try:
                await query.edit_message_text(
                    message_text,
                    reply_markup=reply_markup_to_use,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
            except Exception as edit_error:
                logger.warning(f"Error in edit_message_text, trying fallbacks: {edit_error}")
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await query.edit_message_text(
                        message_text,
                        reply_markup=reply_markup_to_use,
                        parse_mode=None,
                        disable_web_page_preview=disable_web_page_preview
                    )
                except Exception:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –æ—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                    clean_text = message_text.replace('*', '').replace('_', '').replace('`', '')
                    await query.edit_message_text(
                        clean_text,
                        reply_markup=reply_markup_to_use,
                        disable_web_page_preview=disable_web_page_preview
                    )
        
        async def safe_reply_text(message_text, reply_markup_to_use=None):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback"""
            try:
                await query.message.reply_text(
                    message_text,
                    reply_markup=reply_markup_to_use,
                    parse_mode=parse_mode,
                    disable_web_page_preview=disable_web_page_preview
                )
            except Exception as reply_error:
                logger.warning(f"Error in reply_text, trying fallbacks: {reply_error}")
                try:
                    await query.message.reply_text(
                        message_text,
                        reply_markup=reply_markup_to_use,
                        parse_mode=None,
                        disable_web_page_preview=disable_web_page_preview
                    )
                except Exception:
                    clean_text = message_text.replace('*', '').replace('_', '').replace('`', '')
                    await query.message.reply_text(
                        clean_text,
                        reply_markup=reply_markup_to_use,
                        disable_web_page_preview=disable_web_page_preview
                    )
        
        if len(parts) == 1:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω—É —á–∞—Å—Ç—å
            await safe_edit_text(parts[0], reply_markup)
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å
            # –ü–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
            await safe_edit_text(f"üìÑ –ß–∞—Å—Ç—å 1/{len(parts)}\n\n{parts[0]}")
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            for i, part in enumerate(parts[1:], 2):
                is_last_part = (i == len(parts))
                message_text = f"üìÑ –ß–∞—Å—Ç—å {i}/{len(parts)}\n\n{part}"
                
                await safe_reply_text(
                    message_text,
                    reply_markup if is_last_part else None
                )

    def _format_topic_materials(self, topic: Dict, materials: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ç–µ–º—ã –≤ Markdown"""
        response = f"""
**üìñ {topic['title']}**

_{topic['description']}_

‚è±Ô∏è **–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è:** {topic['learning_time']}
üìä **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {topic['difficulty']}

**üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**

{materials.get('tutorial', '')}

**üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:**
{materials.get('links', '')}

**üé• –í–∏–¥–µ–æ –∏ –∫—É—Ä—Å—ã:**
{materials.get('courses', '')}

**üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã:**
{materials.get('examples', '')}
        """
        
        return response  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –±—É–¥–µ–º —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ–∑–∂–µ

    async def complete_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é"""
        query = update.callback_query
        await query.answer()
        
        topic_id = int(query.data.split('_')[1])
        user_id = query.from_user.id
        
        try:
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
            points_earned = await self.db.complete_topic(user_id, topic_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = await self.db.get_user_stats(user_id)
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            completion_message = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

‚ú® <b>–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤:</b> +{points_earned}
üìä <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> {user_stats['total_points']}
üìö <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ–º:</b> {user_stats['completed_topics']}/20

{self._get_motivation_message(user_stats['completed_topics'])}
            """
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–º–∞–º
            keyboard = [[InlineKeyboardButton("üìö –ö —Å–ø–∏—Å–∫—É —Ç–µ–º", callback_data="back_to_topics")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                completion_message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error completing topic: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–º—ã.")

    def _get_motivation_message(self, completed_count: int) -> str:
        """–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if completed_count == 1:
            return "üåü –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        elif completed_count == 5:
            return "üî• –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! –£–∂–µ —á–µ—Ç–≤–µ—Ä—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞!"
        elif completed_count == 10:
            return "‚ö° –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞! –¢—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–µ–Ω!"
        elif completed_count == 15:
            return "üöÄ –ü–æ—á—Ç–∏ —Ñ–∏–Ω–∏—à! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ!"
        elif completed_count == 20:
            return "üèÜ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¢—ã –∏–∑—É—á–∏–ª –≤—Å–µ —Ç–µ–º—ã! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ò–ò!"
        else:
            return "üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å! –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!"

    async def show_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /progress - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            loading_msg = await self._send_loading_indicator(
                update, 
                "üìä –°–æ–±–∏—Ä–∞—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è...",
                context
            )
            
            stats = await self.db.get_user_stats(user_id)
            completed_topics = await self.db.get_completed_topics(user_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await self._delete_loading_message(loading_msg)
            
            progress_bar = self._create_progress_bar(stats['completed_topics'], 20)
            
            progress_message = f"""
üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</b>

{progress_bar} {stats['completed_topics']}/20

‚ú® <b>–û—á–∫–∏:</b> {stats['total_points']}
üìÖ <b>–î–Ω–µ–π –∏–∑—É—á–µ–Ω–∏—è:</b> {stats['learning_days']}
üî• <b>–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫:</b> {stats['streak']} –¥–Ω–µ–π

<b>üéì –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:</b>
            """
            
            for topic in completed_topics:
                progress_message += f"‚úÖ {topic['title']}\n"
            
            await update.message.reply_text(
                progress_message,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error showing progress: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")

    def _create_progress_bar(self, completed: int, total: int) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø–æ–ª–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        filled = int((completed / total) * 10)
        bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
        return f"[{bar}]"

    async def handle_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ"""
        user_id = update.effective_user.id
        question = update.message.text
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –∫–Ω–æ–ø–∫–∏
            if 'waiting_for_question' in context.user_data:
                topic_id = int(context.user_data['waiting_for_question'])
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                del context.user_data['waiting_for_question']
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –ø–æ ID
                topic = await self.topic_service.get_topic_by_id(topic_id)
                
                if not topic:
                    await update.message.reply_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return
                
                current_topic = topic
                
            else:
                # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_topic = await self.db.get_current_topic(user_id)
                
                if not current_topic:
                    await update.message.reply_text(
                        "‚ùì –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /topics"
                    )
                    return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            loading_msg = await self._send_loading_indicator(
                update, 
                "ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –≥–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...",
                context
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Grok API (–¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
            answer = await self.grok_service.answer_question(question, current_topic)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            await self._delete_loading_message(loading_msg)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–º–µ
            keyboard = [
                [InlineKeyboardButton("üìö –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–º–µ", callback_data=f"topic_{current_topic['id']}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            response = f"üí° **–û—Ç–≤–µ—Ç –ø–æ —Ç–µ–º–µ \"{current_topic['title']}\":**\n\n{answer}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Markdown
            await self._send_long_text_message(
                update,
                response,
                reply_markup=reply_markup,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"Error handling question: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        help_text = """
ü§ñ <b>AI Learning Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/topics - –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –ò–ò
/topics_1c - –¢–µ–º—ã –ò–ò –¥–ª—è 1C Enterprise
/progress - –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
/done - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞
2. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
3. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ
4. –û—Ç–º–µ—Ç—å—Ç–µ —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
5. –ü–æ–ª—É—á–∞–π—Ç–µ –æ—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!

<b>üéÆ –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤:</b>
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–º—ã: 100 –æ—á–∫–æ–≤
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ: +10 –æ—á–∫–æ–≤ –∫ —Å—Ç—Ä–∏–∫—É

<b>‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã, –∏ —è –æ—Ç–≤–µ—á—É!
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def update_topics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /update_topics - —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID)
        admin_ids = [152423085]  # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID
        
        if update.effective_user.id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        try:
            await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ç–µ–º—ã
            await update.message.reply_text("üìö –û–±–Ω–æ–≤–ª—è—é –æ–±—â–∏–µ —Ç–µ–º—ã –ø–æ –ò–ò...")
            await self.topic_service._generate_and_save_topics("general")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã 1C
            await update.message.reply_text("üè¢ –û–±–Ω–æ–≤–ª—è—é —Ç–µ–º—ã –ò–ò –¥–ª—è 1C Enterprise...")
            await self.topic_service._generate_and_save_topics("1c")
            
            await update.message.reply_text("‚úÖ –í—Å–µ —Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º: {str(e)}")

    async def show_general_topics_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–µ —Ç–µ–º—ã –ò–ò (callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
        query = update.callback_query
        await query.answer()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ _show_topics_list
        await self._show_topics_list_callback(query, "general")
    
    async def show_1c_topics_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã –¥–ª—è 1C (callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)"""
        query = update.callback_query
        await query.answer()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ _show_topics_list
        await self._show_topics_list_callback(query, "1c")
    
    async def _show_topics_list_callback(self, query, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–º—ã...")
            
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            topics = await self.topic_service.get_topics_by_category(category)
            
            if not topics:
                await query.edit_message_text(
                    f"‚ùå –¢–µ–º—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return
            
            # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–º
            keyboard = []
            for topic in topics:
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìñ {topic['title']}", 
                        callback_data=f"topic_{topic['id']}"
                    )
                ])
            
            # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_topics")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            category_name = "–æ–±—â–∏–µ —Ç–µ–º—ã –ò–ò" if category == "general" else "—Ç–µ–º—ã –¥–ª—è 1C"
            await query.edit_message_text(
                f"üìö –í—ã–±–µ—Ä–∏—Ç–µ {category_name}:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_question_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º topic_id –∏–∑ callback_data
            callback_data = query.data  # question_{topic_id}
            topic_id = callback_data.split('_')[1]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            topic = await self.topic_service.get_topic_by_id(int(topic_id))
            
            if not topic:
                await query.edit_message_text("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º topic_id –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            context.user_data['waiting_for_question'] = topic_id
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å
            keyboard = [
                [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"topic_{topic_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùì **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ \"{topic['title']}\"**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —ç—Ç–æ–π —Ç–µ–º—ã.\n\n"
                "üí° *–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"
                "‚Ä¢ –ö–∞–∫ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ?\n"
                "‚Ä¢ –í —á–µ–º –≥–ª–∞–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?\n"  
                "‚Ä¢ –ö–∞–∫–∏–µ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã?\n"
                "‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä?",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def back_to_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º"""
        query = update.callback_query
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üß† –û–±—â–∏–µ —Ç–µ–º—ã –ò–ò", callback_data="show_general_topics")],
            [InlineKeyboardButton("üè¢ –¢–µ–º—ã –¥–ª—è 1C", callback_data="show_1c_topics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–º:",
            reply_markup=reply_markup
        )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

    async def scheduled_topics_update(self, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        try:
            logger.info("üìÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ç–µ–º—ã
            logger.info("üìö –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ —Ç–µ–º—ã –ø–æ –ò–ò...")
            await self.topic_service._generate_and_save_topics("general")
            logger.info("‚úÖ –û–±—â–∏–µ —Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã 1C
            logger.info("üè¢ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã –ò–ò –¥–ª—è 1C Enterprise...")
            await self.topic_service._generate_and_save_topics("1c")
            logger.info("‚úÖ –¢–µ–º—ã 1C –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            logger.info("üéâ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        async def init_and_run():
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            await self.db.init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            await self.topic_service.initialize_topics()
            logger.info("‚úÖ –¢–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
            logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            application = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            application.add_handler(CommandHandler("start", self.start))
            application.add_handler(CommandHandler("topics", self.show_topics))
            application.add_handler(CommandHandler("topics_1c", self.show_topics_1c))
            application.add_handler(CommandHandler("progress", self.show_progress))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("update_topics", self.update_topics_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            application.add_handler(CallbackQueryHandler(self.handle_topic_selection, pattern="^topic_"))
            application.add_handler(CallbackQueryHandler(self.complete_topic, pattern="^complete_"))
            application.add_handler(CallbackQueryHandler(self.handle_question_button, pattern="^question_"))
            application.add_handler(CallbackQueryHandler(self.back_to_topics, pattern="^back_to_topics"))
            application.add_handler(CallbackQueryHandler(self.show_general_topics_callback, pattern="^show_general_topics$"))
            application.add_handler(CallbackQueryHandler(self.show_1c_topics_callback, pattern="^show_1c_topics$"))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å—ã)
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_question))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            application.add_error_handler(self.error_handler)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º
            job_queue = application.job_queue
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00 –Ω–æ—á–∏
            job_queue.run_repeating(
                self.scheduled_topics_update,
                interval=timedelta(weeks=1),  # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
                first=datetime.now().replace(hour=3, minute=0, second=0, microsecond=0) + timedelta(days=(6 - datetime.now().weekday()) % 7),  # –°–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 3:00
                name="weekly_topics_update"
            )
            logger.info("‚è∞ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º (–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 03:00)")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é
            logger.info("ü§ñ AI Learning Bot –∑–∞–ø—É—â–µ–Ω!")
            
            await application.initialize()
            
            try:
                await application.updater.start_polling()
                await application.start()
                
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                stop_signals = (signal.SIGTERM, signal.SIGINT)
                if stop_signals:
                    for sig in stop_signals:
                        signal.signal(sig, lambda s, f: None)
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è –¥–æ —Å–∏–≥–Ω–∞–ª–∞
                while True:
                    await asyncio.sleep(1)
                    
            except KeyboardInterrupt:
                logger.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                await application.stop()
                await application.updater.stop()
                await application.shutdown()
        
        # –ó–∞–ø—É—Å–∫ –≤ –Ω–æ–≤–æ–º event loop
        try:
            asyncio.run(init_and_run())
        except KeyboardInterrupt:
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

if __name__ == '__main__':
    bot = AILearningBot()
    bot.run()
