#!/usr/bin/env python3
"""–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['DATABASE_URL'] = 'sqlite+aiosqlite:///local_test.db'

def load_env_local():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local"""
    env_local_path = Path('.env.local')
    if env_local_path.exists():
        with open(env_local_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()

async def test_callback_handlers():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_env_local()
    
    try:
        from bot import AILearningBot
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = AILearningBot()
        print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:")
        
        handlers = [
            'show_general_topics_callback',
            'show_1c_topics_callback', 
            '_show_topics_list_callback',
            'back_to_topics'
        ]
        
        for handler_name in handlers:
            if hasattr(bot, handler_name):
                handler = getattr(bot, handler_name)
                if callable(handler):
                    print(f"   ‚úÖ {handler_name} - –Ω–∞–π–¥–µ–Ω –∏ –≤—ã–∑—ã–≤–∞–µ–º—ã–π")
                else:
                    print(f"   ‚ùå {handler_name} - –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º—ã–π")
            else:
                print(f"   ‚ùå {handler_name} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º
        print("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º:")
        
        try:
            general_topics = await bot.topic_service.get_topics_by_category("general")
            print(f"   ‚úÖ –û–±—â–∏–µ —Ç–µ–º—ã: {len(general_topics)} —à—Ç.")
            
            c1_topics = await bot.topic_service.get_topics_by_category("1c") 
            print(f"   ‚úÖ –¢–µ–º—ã 1C: {len(c1_topics)} —à—Ç.")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    asyncio.run(test_callback_handlers())
