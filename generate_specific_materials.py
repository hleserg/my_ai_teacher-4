#!/usr/bin/env python3
"""–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""

import asyncio
import os
from database import Database
from grok_service import GrokService
from topic_service import TopicService

async def generate_materials():
    os.environ['DATABASE_URL'] = 'sqlite+aiosqlite:///local_test.db'
    
    db = Database()
    await db.init_db()
    
    grok_service = GrokService()
    topic_service = TopicService(db, grok_service)
    
    print('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ–º—ã –ø—Ä–æ –¥–µ—Ç–µ–∫—Ü–∏—é –∞–Ω–æ–º–∞–ª–∏–π...')
    
    # –ù–∞–π–¥–µ–º —Ç–µ–º—É
    async with db.async_session() as session:
        from sqlalchemy import select
        from database import Topic
        
        result = await session.execute(
            select(Topic).where(Topic.title.like('%–µ—Ç–µ–∫—Ü–∏—è –∞–Ω–æ–º–∞–ª–∏–π%'))
        )
        topic = result.scalar_one_or_none()
        
        if topic:
            print(f'üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–º—É: {topic.title}')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Topic –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–µ—Ç–æ–¥–∞
            topic_dict = {
                'id': topic.id,
                'title': topic.title,
                'description': topic.description,
                'category': topic.category
            }
            
            materials = await topic_service.generate_learning_materials(topic_dict)
            print('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
            print(f'üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(materials)} —Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤')
        else:
            print('‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')

if __name__ == '__main__':
    asyncio.run(generate_materials())
