#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω
"""

import os
import sys
import asyncio
import subprocess
from pathlib import Path
from typing import List, Dict, Tuple

def check_file_exists(filepath: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    return os.path.exists(filepath)

def check_docker_files() -> List[Tuple[str, bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Ñ–∞–π–ª–æ–≤"""
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö Docker —Ñ–∞–π–ª–æ–≤
    docker_files = [
        'docker-compose.prod.yml',
        'Dockerfile.prod',
        '.env.prod.example',
        'requirements.txt',
        'postgresql.conf'
    ]
    
    for file in docker_files:
        exists = check_file_exists(file)
        results.append((f"Docker file: {file}", exists, "" if exists else "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ docker-compose
    try:
        result = subprocess.run(
            ['docker-compose', '-f', 'docker-compose.prod.yml', 'config', '--quiet'],
            capture_output=True, text=True, check=True
        )
        results.append(("Docker Compose –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å", True, "–§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω"))
    except subprocess.CalledProcessError as e:
        results.append(("Docker Compose –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å", False, f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e.stderr}"))
    except FileNotFoundError:
        results.append(("Docker Compose –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å", False, "docker-compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
    
    return results

def check_python_files() -> List[Tuple[str, bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Ñ–∞–π–ª–æ–≤"""
    results = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ Python —Ñ–∞–π–ª—ã
    python_files = [
        'main.py',
        'bot.py', 
        'database.py',
        'grok_service.py',
        'topic_service.py',
        'scheduler.py',
        'health_check.py'
    ]
    
    for file in python_files:
        exists = check_file_exists(file)
        if exists:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    compile(f.read(), file, 'exec')
                results.append((f"Python syntax: {file}", True, "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"))
            except SyntaxError as e:
                results.append((f"Python syntax: {file}", False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"))
        else:
            results.append((f"Python file: {file}", False, "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    
    return results

def check_requirements() -> List[Tuple[str, bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements —Ñ–∞–π–ª–æ–≤"""
    results = []
    
    req_files = ['requirements.txt', 'requirements-dev.txt']
    
    for req_file in req_files:
        if check_file_exists(req_file):
            try:
                with open(req_file, 'r') as f:
                    lines = f.readlines()
                    valid_lines = [line.strip() for line in lines if line.strip() and not line.strip().startswith('#')]
                    results.append((f"Requirements: {req_file}", True, f"–°–æ–¥–µ—Ä–∂–∏—Ç {len(valid_lines)} –ø–∞–∫–µ—Ç–æ–≤"))
            except Exception as e:
                results.append((f"Requirements: {req_file}", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"))
        else:
            results.append((f"Requirements: {req_file}", False, "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    
    return results

def check_deployment_scripts() -> List[Tuple[str, bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    results = []
    
    scripts = [
        'deploy.sh',
        'deploy.ps1'
    ]
    
    for script in scripts:
        exists = check_file_exists(script)
        results.append((f"Deploy script: {script}", exists, "–ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é" if exists else "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    
    return results

def check_documentation() -> List[Tuple[str, bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    results = []
    
    docs = [
        'README.md',
        'PRODUCTION.md',
        'DEPLOYMENT.md'
    ]
    
    for doc in docs:
        exists = check_file_exists(doc)
        if exists:
            try:
                with open(doc, 'r', encoding='utf-8') as f:
                    content = f.read()
                    word_count = len(content.split())
                    results.append((f"Documentation: {doc}", True, f"–°–æ–¥–µ—Ä–∂–∏—Ç ~{word_count} —Å–ª–æ–≤"))
            except Exception as e:
                results.append((f"Documentation: {doc}", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"))
        else:
            results.append((f"Documentation: {doc}", False, "–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    
    return results

def check_configuration() -> List[Tuple[str, bool, str]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if check_file_exists('.env.prod.example'):
        try:
            with open('.env.prod.example', 'r') as f:
                content = f.read()
                required_vars = [
                    'TELEGRAM_BOT_TOKEN',
                    'GROK_API_KEY', 
                    'POSTGRES_PASSWORD',
                    'REDIS_PASSWORD'
                ]
                
                missing_vars = []
                for var in required_vars:
                    if var not in content:
                        missing_vars.append(var)
                
                if missing_vars:
                    results.append((
                        "Configuration template", 
                        False, 
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}"
                    ))
                else:
                    results.append((
                        "Configuration template", 
                        True, 
                        "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç"
                    ))
        except Exception as e:
            results.append(("Configuration template", False, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"))
    else:
        results.append(("Configuration template", False, ".env.prod.example –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"))
    
    return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ AI Learning Bot –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
    print("=" * 80)
    print()
    
    all_results = []
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("üê≥ Docker —Ñ–∞–π–ª—ã", check_docker_files),
        ("üêç Python —Ñ–∞–π–ª—ã", check_python_files),
        ("üì¶ Requirements", check_requirements),
        ("üöÄ –°–∫—Ä–∏–ø—Ç—ã —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è", check_deployment_scripts),
        ("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", check_documentation),
        ("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_configuration),
    ]
    
    for section_name, check_func in checks:
        print(f"\n{section_name}")
        print("-" * 40)
        
        results = check_func()
        all_results.extend(results)
        
        for test_name, success, message in results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"  {status} {test_name}")
            if message:
                print(f"     {message}")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_checks = len(all_results)
    passed_checks = sum(1 for _, success, _ in all_results if success)
    failed_checks = total_checks - passed_checks
    
    print()
    print("=" * 80)
    print(f"üìä –ò–¢–û–ì–û: {passed_checks}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if failed_checks == 0:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω.")
        return 0
    else:
        print(f"‚ö†Ô∏è  {failed_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ—à–ª–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")
        print()
        print("‚ùå –ù–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        for test_name, success, message in all_results:
            if not success:
                print(f"  ‚Ä¢ {test_name}: {message}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
