#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

def load_env_local():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local"""
    env_local_path = Path('.env.local')
    if env_local_path.exists():
        print("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º .env.local")
        with open(env_local_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        return True
    return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    modules = [
        'grok_service',
        'topic_service', 
        'database',
        'bot',
        'scheduler',
        'health_check'
    ]
    
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π...")
    
    success_count = 0
    for module_name in modules:
        try:
            __import__(module_name)
            print(f"   ‚úÖ {module_name}")
            success_count += 1
        except Exception as e:
            print(f"   ‚ùå {module_name}: {e}")
    
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(modules)} –º–æ–¥—É–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    return success_count == len(modules)

async def test_grok_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã GrokService"""
    try:
        from grok_service import GrokService
        
        print("üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã GrokService...")
        
        grok = GrokService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods = [m for m in dir(grok) if not m.startswith('_') and callable(getattr(grok, m))]
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: {', '.join(methods)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = os.getenv('GROK_API_KEY')
        if not api_key or api_key == 'your_grok_api_key_here':
            print("   ‚ö†Ô∏è  GROK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return True
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–º
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º generate_ai_topics...")
        topics = await grok.generate_ai_topics("machine_learning")
        
        if topics and len(topics) > 0:
            print(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(topics)} —Ç–æ–ø–∏–∫–æ–≤")
            return True
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫–∏")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    env_loaded = load_env_local()
    if not env_loaded:
        print("‚ö†Ô∏è  –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    imports_ok = test_imports()
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º GrokService
    grok_ok = await test_grok_methods()
    print()
    
    # –ò—Ç–æ–≥–∏
    print("=" * 50)
    print("üìä –ò—Ç–æ–≥–∏:")
    print(f"   –ò–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if imports_ok else '‚ùå'}")
    print(f"   GrokService: {'‚úÖ' if grok_ok else '‚ùå'}")
    
    if imports_ok:
        print("\nüéâ –°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞!")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ GROK_API_KEY –≤ .env.local")
        print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:")
        print("   python health_check.py  - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("   python bot.py          - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω)")
    else:
        print("\nüîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π")

if __name__ == "__main__":
    asyncio.run(main())
