#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AI Learning Bot
"""

import os
import sys
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from database import Database
    from grok_service import GrokService  
    from topic_service import TopicService
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SystemHealthCheck:
    def __init__(self):
        self.results = []
        
    def log_result(self, test_name: str, success: bool, message: str = ""):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        result = f"{status} {test_name}"
        if message:
            result += f": {message}"
        
        print(result)
        self.results.append((test_name, success, message))
        
    async def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        grok_key = os.getenv('GROK_API_KEY')
        
        if not telegram_token or telegram_token == 'your_telegram_bot_token_here':
            self.log_result("Environment Variables", False, "TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        if len(telegram_token.split(':')) != 2:
            self.log_result("Environment Variables", False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN")  
            return False
            
        self.log_result("Environment Variables", True, "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return True
        
    async def check_database_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            db = Database()
            await db.init_db()
            self.log_result("Database Connection", True, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
            
        except Exception as e:
            self.log_result("Database Connection", False, str(e))
            return False
            
    async def check_grok_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Grok API"""
        try:
            grok = GrokService()
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
            test_topics = await grok.generate_ai_topics("general")
            
            if test_topics and len(test_topics) > 0:
                self.log_result("Grok API", True, f"API —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(test_topics)} —Ç–µ–º")
                return True
            else:
                self.log_result("Grok API", False, "API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ")
                return False
                
        except Exception as e:
            self.log_result("Grok API", False, str(e))
            return False
            
    async def check_topic_service(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–º"""
        try:
            db = Database()
            grok = GrokService()
            topic_service = TopicService(db, grok)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º
            await topic_service.initialize_topics()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º
            topics = await topic_service.get_topics_by_category("general")
            
            if topics and len(topics) > 0:
                self.log_result("Topic Service", True, f"–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–µ–º")
                return True
            else:
                self.log_result("Topic Service", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã")
                return False
                
        except Exception as e:
            self.log_result("Topic Service", False, str(e))
            return False
            
    async def check_docker_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        if os.path.exists('/.dockerenv'):
            self.log_result("Docker Environment", True, "–ó–∞–ø—É—â–µ–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ")
            return True
        else:
            self.log_result("Docker Environment", True, "–ó–∞–ø—É—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ")
            return True
            
    async def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ AI Learning Bot")
        print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        checks = [
            self.check_environment_variables,
            self.check_docker_environment,
            self.check_database_connection, 
            self.check_grok_api,
            self.check_topic_service
        ]
        
        passed = 0
        total = len(checks)
        
        for check in checks:
            try:
                result = await check()
                if result:
                    passed += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check.__name__}: {e}")
                
        print("=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
        else:
            print(f"‚ö†Ô∏è  {total - passed} –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–µ –ø—Ä–æ—à–ª–∏. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
            return False
            
    def print_recommendations(self):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
        failed_tests = [r for r in self.results if not r[1]]
        
        if not failed_tests:
            return
            
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:")
        print("-" * 50)
        
        for test_name, _, message in failed_tests:
            if "TELEGRAM_BOT_TOKEN" in message:
                print("‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π TELEGRAM_BOT_TOKEN")
                print("‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
                
            elif "Database" in test_name:
                print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")  
                print("‚Ä¢ –î–ª—è Docker: docker-compose up -d db")
                print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
                
            elif "Grok API" in test_name:
                print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ GROK_API_KEY –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
                print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API (rate limits)")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    health_check = SystemHealthCheck()
    success = await health_check.run_all_checks()
    
    if not success:
        health_check.print_recommendations()
        sys.exit(1)
    
    sys.exit(0)

if __name__ == "__main__":
    asyncio.run(main())
