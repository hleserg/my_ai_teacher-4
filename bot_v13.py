import os
import logging
from datetime import datetime
from typing import List, Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from database import Database
from grok_service import GrokService
from topic_service import TopicService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AILearningBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.db = Database()
        self.grok_service = GrokService()
        self.topic_service = TopicService(self.db, self.grok_service)
        
        # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher –¥–ª—è v13
        self.updater = Updater(token=self.token, use_context=True)
        self.dispatcher = self.updater.dispatcher
        
    def start(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–î—Ä—É–≥"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT OR IGNORE INTO users (telegram_id, username) VALUES (?, ?)",
                (user_id, username)
            )
            conn.commit()
        
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n\n"
        welcome_text += "–Ø —Ç–≤–æ–π AI —É—á–∏—Ç–µ–ª—å, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã.\n\n"
        welcome_text += "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        welcome_text += "üìö –û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
        welcome_text += "üß™ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –∫–≤–∏–∑—ã\n"
        welcome_text += "üí° –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        welcome_text += "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
        keyboard = self._create_topics_keyboard()
        
        update.message.reply_text(welcome_text, reply_markup=keyboard)
    
    def _create_topics_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏"""
        topics = self.topic_service.get_all_topics()
        
        keyboard = []
        for i in range(0, len(topics), 2):  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            row = []
            row.append(InlineKeyboardButton(topics[i]['title'], callback_data=f"topic_{topics[i]['id']}"))
            if i + 1 < len(topics):
                row.append(InlineKeyboardButton(topics[i + 1]['title'], callback_data=f"topic_{topics[i + 1]['id']}"))
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
        keyboard.append([InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")])
        
        return InlineKeyboardMarkup(keyboard)
    
    def help_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = "ü§ñ *AI –£—á–∏—Ç–µ–ª—å - –°–ø—Ä–∞–≤–∫–∞*\n\n"
        help_text += "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        help_text += "/topics - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã\n"
        help_text += "/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        help_text += "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        help_text += "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        help_text += "2Ô∏è‚É£ –ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        help_text += "3Ô∏è‚É£ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã\n"
        help_text += "4Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n"
        help_text += "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!"
        
        update.message.reply_text(help_text, parse_mode='Markdown')
    
    def topics_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /topics - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–º—ã"""
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=self._create_topics_keyboard())
    
    def progress_command(self, update: Update, context: CallbackContext):
        """–ö–æ–º–∞–Ω–¥–∞ /progress - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT t.title, up.lessons_completed, up.total_lessons, up.progress_percentage
                FROM user_progress up
                JOIN topics t ON up.topic_id = t.id
                WHERE up.user_id = ?
                ORDER BY up.progress_percentage DESC
            """, (user_id,))
            
            progress_data = cursor.fetchall()
        
        if not progress_data:
            update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å —Ç–µ–º—ã!")
            return
        
        progress_text = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n\n"
        for title, completed, total, percentage in progress_data:
            progress_text += f"üìö {title}\n"
            progress_text += f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {completed}/{total} —É—Ä–æ–∫–æ–≤ ({percentage}%)\n"
            progress_text += f"   {'‚ñà' * int(percentage // 10)}{'‚ñë' * (10 - int(percentage // 10))} {percentage}%\n\n"
        
        update.message.reply_text(progress_text, parse_mode='Markdown')
    
    def topic_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º"""
        query = update.callback_query
        query.answer()
        
        callback_data = query.data
        
        if callback_data.startswith("topic_"):
            topic_id = int(callback_data.split("_")[1])
            self._show_topic_content(query, topic_id)
        elif callback_data == "my_progress":
            self._show_user_progress(query)
        elif callback_data.startswith("lesson_"):
            lesson_id = int(callback_data.split("_")[1])
            self._show_lesson_content(query, lesson_id)
        elif callback_data.startswith("test_"):
            topic_id = int(callback_data.split("_")[1])
            self._start_test(query, topic_id)
    
    def _show_topic_content(self, query, topic_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–º—ã"""
        topic = self.topic_service.get_topic_by_id(topic_id)
        if not topic:
            query.edit_message_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = query.from_user.id
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET current_topic_id = ? WHERE telegram_id = ?",
                (topic_id, user_id)
            )
            conn.commit()
        
        content_text = f"üìö *{topic['title']}*\n\n"
        content_text += f"{topic['description']}\n\n"
        content_text += "*–ß—Ç–æ –≤—ã –∏–∑—É—á–∏—Ç–µ:*\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–º—ã
        lessons = self.topic_service.get_lessons_by_topic(topic_id)
        for i, lesson in enumerate(lessons, 1):
            content_text += f"{i}. {lesson['title']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–∫–∞–º–∏
        keyboard = []
        for lesson in lessons:
            keyboard.append([InlineKeyboardButton(
                f"üìñ {lesson['title']}", 
                callback_data=f"lesson_{lesson['id']}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∞
        keyboard.append([InlineKeyboardButton("üß™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"test_{topic_id}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_topics")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(content_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    def _show_lesson_content(self, query, lesson_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —É—Ä–æ–∫–∞
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        query.edit_message_text(
            f"üìñ –£—Ä–æ–∫ #{lesson_id}\n\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_topics")
            ]])
        )
    
    def _start_test(self, query, topic_id):
        """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∞
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        query.edit_message_text(
            f"üß™ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ #{topic_id}\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ...",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_topics")
            ]])
        )
    
    def _show_user_progress(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT t.title, up.lessons_completed, up.total_lessons, up.progress_percentage
                FROM user_progress up
                JOIN topics t ON up.topic_id = t.id
                WHERE up.user_id = ?
                ORDER BY up.progress_percentage DESC
            """, (user_id,))
            
            progress_data = cursor.fetchall()
        
        if not progress_data:
            progress_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å —Ç–µ–º—ã!"
        else:
            progress_text = "üìä *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n\n"
            for title, completed, total, percentage in progress_data:
                progress_text += f"üìö {title}: {percentage}%\n"
        
        query.edit_message_text(
            progress_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data="back_to_topics")
            ]])
        )
    
    def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT current_topic_id FROM users WHERE telegram_id = ?", (user_id,))
            result = cursor.fetchone()
            current_topic_id = result[0] if result else None
        
        if current_topic_id:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Grok
            try:
                response = self.grok_service.generate_educational_response(user_message, current_topic_id)
                update.message.reply_text(response)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            # –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
            update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                reply_markup=self._create_topics_keyboard()
            )
    
    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.message:
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("start", self.start))
        self.dispatcher.add_handler(CommandHandler("help", self.help_command))
        self.dispatcher.add_handler(CommandHandler("topics", self.topics_command))
        self.dispatcher.add_handler(CommandHandler("progress", self.progress_command))
        
        # Callback queries
        self.dispatcher.add_handler(CallbackQueryHandler(self.topic_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dispatcher.add_error_handler(self.error_handler)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è v13)"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        self.updater.start_polling()
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        # –û–∂–∏–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.updater.idle()
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
